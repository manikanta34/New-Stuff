public static void revokeRoleGrant() {
		RoleManager rolemanagersvc = oimClient.getService(RoleManager.class);
		Set<String> roleKeys = new HashSet<String>();
		roleKeys.add("");
		roleKeys.add("");
		Set<String> usrKeys = new HashSet<String>();
		usrKeys.add("");
		usrKeys.add("");
		usrKeys.add("");
		usrKeys.add("");
		try {
			for (String roleKey : roleKeys) {
				rolemanagersvc.revokeRoleGrant(roleKey, usrKeys);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public Long getRoleKeyByRoleName(String roleName) throws SearchKeyNotUniqueException, AccessDeniedException, NoSuchRoleException, RoleLookupException
	    {
	        HashSet retAttrs = new HashSet();
	        retAttrs.add(RoleManagerConstants.RoleAttributeName.KEY.getId()); // Role Key
	        Role role = roleMgrOps.getDetails(RoleManagerConstants.RoleAttributeName.NAME.getId(), roleName, retAttrs); // Search by role name attribute which is unique
	        return Long.parseLong(role.getEntityId());
	    }
	
	
	
	public Set<String> getUserKeysofAbove90Days(String sqlQuery) throws Exception {
		Set<String> listOfUserKeys = null;
		StringBuilder formStatement = null;
		try {
			try (Connection con = Platform.getOperationalDS().getConnection();
					PreparedStatement stmt = con.prepareStatement(sqlQuery);
					ResultSet rs = stmt.executeQuery();) {
				listOfUserKeys=new HashSet<>();
				if (rs != null) {
					while (rs.next()) {
						listOfUserKeys.add(rs.getString(1));

					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return listOfUserKeys;
	}
	
	
	
	public Set<String> getDatabaseConnection(String sqlQuery){
	    com.thortech.xl.dataaccess.tcDataProvider dbProvider = null;
		Set<String> listOfUserKeys = null;

	    try{
	        XLClientSecurityAssociation.setClientHandle(oimClient);
	        dbProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();
	        com.thortech.xl.dataaccess.tcDataSet usersDataSet = new com.thortech.xl.dataaccess.tcDataSet();
	        usersDataSet.setQuery(dbProvider, sqlQuery);
	        usersDataSet.executeQuery();
			listOfUserKeys=new HashSet<>();
	        int numRecords = usersDataSet.getTotalRowCount();
	        for(int i = 0; i < numRecords; i++){
	            usersDataSet.goToRow(i);
				listOfUserKeys.add(usersDataSet.getString("USR_KEY"));
	        }
	    }
	  
	    catch(Exception e){
	        System.out.println("Exception occured while getting user details" + e);
	    }
	    finally{
	        if(dbProvider != null){
	            try{
	                dbProvider.close();
	            } catch(Exception e) {
	                System.out.println("Exception occured while closing connection" + e);
	            }
	        }
	       
	        XLClientSecurityAssociation.clearThreadLoginSession();  
	    }
	    return listOfUserKeys;
	}
	
	
