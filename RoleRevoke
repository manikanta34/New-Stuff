public static void revokeRoleGrant() {
		RoleManager rolemanagersvc = oimClient.getService(RoleManager.class);
		Set<String> roleKeys = new HashSet<String>();
		roleKeys.add("");
		roleKeys.add("");
		Set<String> usrKeys = new HashSet<String>();
		usrKeys.add("");
		usrKeys.add("");
		usrKeys.add("");
		usrKeys.add("");
		try {
			for (String roleKey : roleKeys) {
				rolemanagersvc.revokeRoleGrant(roleKey, usrKeys);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public Long getRoleKeyByRoleName(String roleName) throws SearchKeyNotUniqueException, AccessDeniedException, NoSuchRoleException, RoleLookupException
	    {
	        HashSet retAttrs = new HashSet();
	        retAttrs.add(RoleManagerConstants.RoleAttributeName.KEY.getId()); // Role Key
	        Role role = roleMgrOps.getDetails(RoleManagerConstants.RoleAttributeName.NAME.getId(), roleName, retAttrs); // Search by role name attribute which is unique
	        return Long.parseLong(role.getEntityId());
	    }
	
	
	
	public Set<String> getUserKeysofAbove90Days(String sqlQuery) throws Exception {
		Set<String> listOfUserKeys = null;
		StringBuilder formStatement = null;
		try {
			try (Connection con = Platform.getOperationalDS().getConnection();
					PreparedStatement stmt = con.prepareStatement(sqlQuery);
					ResultSet rs = stmt.executeQuery();) {
				listOfUserKeys=new HashSet<>();
				if (rs != null) {
					while (rs.next()) {
						listOfUserKeys.add(rs.getString(1));

					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return listOfUserKeys;
	}
